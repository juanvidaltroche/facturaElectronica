'----- Prueba masiva para generacion de cuf y su validación
Try
			Dim rutaXls As String = String.Empty
			Dim dt As New DataTable

			OpenFileDialog1.DefaultExt = "*.xls"
			OpenFileDialog1.Filter = "Excel | *.xls;*.xlsx"
			If OpenFileDialog1.ShowDialog = Windows.Forms.DialogResult.Cancel Then
				Exit Sub
			Else
				rutaXls = OpenFileDialog1.FileName
				dt = CargarExcel(rutaXls, "Hoja1")


				Dim cuf_a As String
				Dim cuf_b As String
				Dim i As Integer = 1
				For Each dr As DataRow In dt.Rows
					cuf_a = LibreriaFacturas.Utilitarios.GeneraCuf(dr.Item(20).ToString()).Trim
					cuf_b = dr.Item(23).ToString().Trim.ToLower

					If cuf_a <> cuf_b Then
						MessageBox.Show(CType(i, String))
						i = 0
					End If
					i += 1
				Next
				If i - 1 = dt.Rows.Count Then
					MessageBox.Show("Correcto")
				End If
			End If
		Catch ex As Exception
		End Try
'---
Public Function CargarExcel(ByVal vLibro As String, ByVal vHoja As String) As DataTable
		Dim cs As String = "Provider=Microsoft.Jet.OLEDB.4.0;" & "Data Source=" & vLibro & ";" & "Extended Properties=""Excel 8.0;HDR=YES"""
		Try
			Dim cn As New OleDbConnection(cs) 'cadena de coneccion 

			If Not File.Exists(vLibro) Then
				MsgBox("No se encontro un libro válido en la ubicación especificada.", MsgBoxStyle.Exclamation, "bnb")
				Return New DataTable
				Exit Function
			End If

			Dim da As New OleDbDataAdapter("select * from [" & vHoja & "$]", cs)
			Dim ds As New DataSet

			da.Fill(ds)
			Return ds.Tables(0)

		Catch ex As Exception
			'MsgBox("No se encontro un libro válido en la ubicación especificada. " & ex.Message.ToString, MsgBoxStyle.Exclamation, "bnb")
			Return New DataTable
		End Try
		Return New DataTable
	End Function
